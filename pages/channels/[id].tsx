import styles from "./[id].module.scss";
import type { GetServerSideProps, InferGetServerSidePropsType } from "next";
import Head from "next/head";
import Filter from "~/public/assets/images/filter.svg";
import useBreakpoint from "~/hooks/useBreakpoint";
import { Breakpoint } from "~/constants/global";
import MultiColorProgressBar from "~/components/multi-color-progress-bar/MultiColorProgressBar";
import { ITeam } from "~/types/users";
import clsx from "clsx";
import { useEffect, useState } from "react";

const Channels = (
  props: InferGetServerSidePropsType<typeof getServerSideProps>
): JSX.Element => {
  let { primaryTeam, consolidatedTeams } = props;
  // Hardcoded because Andrew is "logged in"
  const user_id = "UQ3QMNZ4M";
  const [selectedTeam, setSelectedTeam] = useState<ITeam>(primaryTeam);
  const [selectedFilter, setSelectedFilter] = useState<string>("All");
  const [filteredTeams, setFilteredTeams] = useState<ITeam[]>([]);

  const filters = ["All", "My Teams"];
  // Purposefully kept the annotations for accessibilty purposes
  // Explore having patterns on every progress bar for accessibility || make it better for screen readers
  const progress = [
    {
      name: "Green",
      value: 60,
      color: "#83B87C",
    },
    {
      name: "Yellow",
      value: 23,
      color: "#CD9F3B",
    },
    {
      name: "Red",
      value: 7,
      color: "#DC9685",
    },
    {
      name: "Unknown",
      value: 10,
      color: "#B0B4B9",
    },
  ];

  useEffect(() => {
    if (selectedFilter === "All") {
      setFilteredTeams(consolidatedTeams);
    } else if (selectedFilter === "My Teams") {
      setFilteredTeams(
        consolidatedTeams.filter(
          (team: ITeam) =>
            team.manager_id === user_id || team.directs.includes(user_id)
        )
      );
    }
  }, [consolidatedTeams, selectedFilter]);

  const breakpoint = useBreakpoint();

  return (
    <div>
      <Head>
        <title>{primaryTeam.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.headerSection}>
        <div className={styles.name}># {primaryTeam.name}</div>
        <div className={styles.filterContainer}>
          <div className={styles.filterIcon}>
            {breakpoint && breakpoint >= Breakpoint.MD ? (
              <p>Filter by</p>
            ) : (
              <Filter width={25} height={25} />
            )}
          </div>
          {breakpoint && breakpoint >= Breakpoint.MD ? (
            <div className={styles.filters}>
              {filters.map((filter, index) => (
                <div
                  key={index}
                  className={clsx(
                    styles.filter,
                    selectedFilter === filter && styles.active
                  )}
                  onClick={() => {
                    console.log(filter);
                    setSelectedFilter(filter);
                  }}
                >
                  {filter}
                </div>
              ))}
            </div>
          ) : null}
        </div>
      </div>

      <div className={styles.statsSection}>
        <div className={styles.statsTitle}>Participation</div>

        {/* @ts-ignore */}
        <MultiColorProgressBar readings={progress} />
      </div>

      <div className={styles.consolidatedTeamsSection}>
        <ConsolidatedTeamsContent
          primaryTeam={primaryTeam}
          consolidatedTeams={filteredTeams}
          selectedTeam={selectedTeam}
          setSelectedTeam={setSelectedTeam}
        />
        <TeamInfoPane team={selectedTeam} />
      </div>
    </div>
  );
};

const ConsolidatedTeamsContent = ({
  primaryTeam,
  consolidatedTeams,
  selectedTeam,
  setSelectedTeam,
}: {
  primaryTeam: ITeam;
  consolidatedTeams: ITeam[];
  selectedTeam: ITeam;
  setSelectedTeam: (team: ITeam) => void;
}): JSX.Element => {
  const content = consolidatedTeams.map((team: ITeam) => {
    const isPrimary = team.team_id === primaryTeam.team_id;
    const isSelected = team.team_id === selectedTeam.team_id;
    return (
      <div
        key={team.id}
        className={clsx(
          styles.teamContainer,
          isSelected && styles.selected,
          isPrimary && styles.primary
        )}
        onClick={() => setSelectedTeam(team)}
      >
        <span className={styles.teamName}>{team.name}</span>
        <span className={styles.managerName}>{team.manager}</span>
      </div>
    );
  });

  return <div className={styles.consolidatedTeams}>{content}</div>;
};

const TeamInfoPane = ({ team }: { team: ITeam }): JSX.Element => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchUsers = async () => {
      const data = await fetch(
        `http://localhost:3000/api/status?userIds=${JSON.parse(
          // @ts-ignore
          team.directs
        ).join(",")}`
      );
      const json = await data.json();
      console.log(json);
      setUsers(json);
    };
    fetchUsers();
  }, [team]);

  return (
    <div className={styles.teamInfoPane}>
      <div className={styles.teamName}>{team.name}</div>
      <div className={styles.manager}>Manager - {team.manager}</div>

      <div className={styles.reports}>
        <span className={styles.reportsText}>Reports</span>
        {users.map((user) => (
          <div
            key={user.user.user_id}
            className={clsx(
              styles.report,
              user.status === "green" && styles.green
            )}
          >
            {user?.user.name} - {user?.status}
          </div>
        ))}
      </div>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { id = "CQ6151GPQ" } = context.query;

  const data = await fetch(`http://localhost:3000/api/organization/${id}`);

  const response = await data.json();

  const { primaryTeam, consolidatedTeams } = response;
  console.log("PRIMARY TEAM: ", primaryTeam);
  return {
    props: {
      consolidatedTeams,
      primaryTeam,
    },
  };
};

export default Channels;
